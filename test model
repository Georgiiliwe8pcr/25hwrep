import pandas as pd
from sklearn.model_selection import GridSearchCV, train_test_split
from xgboost import XGBClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.metrics import accuracy_score, recall_score, precision_score, f1_score

# Завантаження даних
data = pd.read_csv("internet_service_churn.csv")

# Розділення даних на X та y
X = data.drop(columns=["id", "churn"])
y = data["churn"]

# Розділення на тренувальний та тестовий набори
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Побудова конвеєра
pipeline = Pipeline([
    ("scaler", StandardScaler()),  # Нормалізація даних
    ("model", XGBClassifier(random_state=42, n_jobs=-1))  # XGBoost з паралелізацією
])

# Гіперпараметри для крос-валідації
param_grid = {
    "model__n_estimators": [100, 200],  # Кількість дерев
    "model__max_depth": [3, 5, 7],      # Глибина дерев
    "model__learning_rate": [0.01, 0.1],  # Швидкість навчання
    "model__subsample": [0.8, 1.0],     # Частка даних для кожного дерева
    "model__colsample_bytree": [0.8, 1.0]  # Частка ознак для кожного дерева
}

# GridSearchCV
grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring="f1", n_jobs=-1)  # Паралелізація
grid_search.fit(X_train, y_train)

# Найкращі параметри
print("Найкращі параметри:", grid_search.best_params_)

# Оцінка на тестовому наборі
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Recall:", recall_score(y_test, y_pred))
print("Precision:", precision_score(y_test, y_pred))
print("F1-score:", f1_score(y_test, y_pred))
